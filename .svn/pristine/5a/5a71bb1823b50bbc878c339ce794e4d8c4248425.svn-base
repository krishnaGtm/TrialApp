
using SQLite;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using TrialApp.Common;
using TrialApp.DataAccess;
using TrialApp.Entities;
using TrialApp.Entities.ServiceRequest;
using TrialApp.Entities.ServiceResponse;
using TrialApp.Entities.Transaction;
using TrialApp.ServiceClient;

namespace TrialApp.Services
{

    public class TrialService
    {
        private TrialRepository repo;
        private TrialRepository repo1;

        public TrialService()
        {
            repo = new TrialRepository(new SQLiteAsyncConnection(DbPath.GetTransactionDbPath()));
            repo1 = new TrialRepository();
        }
        public List<Trial> GetAllTrials()
        {
            var orgiList =  repo1.Get();
            return orgiList.ToList();
        }

        public List<TrialEntryApp> GetVarietiesList(int ezid)
        {
            var varietyList = repo.GetVarieties(ezid);
            return varietyList;
        }

        public async Task<List<TrialDto1>> GetTrialsWrapperService()
        {
            var soapClient = new SoapClient
            {
                EndPointAddress = WebserviceTasks.Endpoint,
                Credentail = WebserviceTasks.domain + "/" + WebserviceTasks.usernameWS + ":" + WebserviceTasks.passwordWS
            };

            var reqObj = new getTrialsWrapper
            {
                AppName = "TrialApp",
                DeviceID = WebserviceTasks.deviceId,
                SoftwareVersion = WebserviceTasks.appVersion,
                Token = WebserviceTasks.token,
                UserName = WebserviceTasks.usernameWS
            };
            var resp = await
                soapClient.GetResponse<getTrialsWrapper, getTrialsWrapperResponse>(
                    reqObj);
            var localTrialsEZIDs = GetAllTrials().Select(t=>t.EZID);
            var result = resp.TrialDto.Where(t => !localTrialsEZIDs.Contains(Convert.ToInt32(t.EZID))).ToList();
            return result;
        }

        public async Task<List<int>> DownloadTrialEntriesData(IEnumerable<Trial> trialList)
        {
            var  ezidSuccess = new List<int>();
            var soapClient = new SoapClient
            {
                EndPointAddress = WebserviceTasks.Endpoint,
                Credentail = WebserviceTasks.domain + "/" + WebserviceTasks.usernameWS + ":" + WebserviceTasks.passwordWS
            };

            foreach (var item in trialList)
            {
                var reqObj = new GetTrialEntriesData
                {
                    AppName = "TrialApp",
                    DeviceID = WebserviceTasks.deviceId,
                    SoftwareVersion = WebserviceTasks.appVersion,
                    Token = WebserviceTasks.token,
                    UserName = WebserviceTasks.usernameWS,
                    EZID = item.EZID.ToString()
                };
                var resp = await
               soapClient.GetResponse<GetTrialEntriesData, GetTrialEntriesDataResponse>(
                   reqObj);
                if (resp.Result != "Success")
                    break;
                if (!SaveTrialEntriesData(resp, item))
                    break;
                ezidSuccess.Add(item.EZID);
            }

            return ezidSuccess;
        }

        public bool SaveTrialEntriesData(GetTrialEntriesDataResponse response, Trial trial)
        {
            var returnValue = false;

            var tlList = new List<TrialEntryApp>();
            var relationList = new List<Relationship>();
            var observationList = new List<ObservationApp>();

            if (response.Result != "Success") return returnValue;
            if (response.Observations != null)
            {

                observationList.AddRange(response.Observations.ObservationDto.Select(obsData => new ObservationApp
                {
                    TraitID = Convert.ToInt32(obsData.TraitID),
                    EZID = obsData.EZID.ToString(),
                    UserIDCreated = obsData.UserIDCreated.ToLower(),
                    UserIDUpdated = obsData.UserIDUpdated.ToLower(),
                    DateCreated = obsData.ObservationDate == "" ? "" : Convert.ToDateTime(obsData.ObservationDate).ToString("yyyy-MM-dd"),
                    DateUpdated = obsData.ObservationDate == "" ? "" : Convert.ToDateTime(obsData.ObservationDate).ToString("yyyy-MM-dd"),
                    ObsValueChar = obsData.ValueChar,
                    ObsValueDate = obsData.ValueDate == "" ? (DateTime?)null : Convert.ToDateTime(Convert.ToDateTime(obsData.ValueDate).ToString("yyyy-MM-dd")),
                    ObsValueDec = obsData.ValueDec == "" ? (decimal?)null :Convert.ToDecimal(obsData.ValueDec),
                    ObsValueInt = obsData.ValueInt == "" ? (int?)null : Convert.ToInt32(obsData.ValueInt),
                    ObservationId = obsData.ObservationID == "" ? (int?)null : Convert.ToInt32(obsData.ObservationID) 
                }));
            }

            if (response.TrialEntries != null)
            {
                foreach (var _trialdata in response.TrialEntries.TrialEntryDto)
                {
                    var trialEntriesApp = new TrialEntryApp
                    {
                        EZID = _trialdata.EZID ?? "",
                        CropCode = _trialdata.CropCode ?? "",
                        FieldNumber = _trialdata.FieldNumber ?? "",
                        EZIDVariety = _trialdata.Variety.EZID ?? "",
                        VarietyNr = _trialdata.Variety.Number == "" ? (int?)null :Convert.ToInt32(_trialdata.Variety.Number),//_trialdata.Variety.Number == null ? (int?) null : Convert.ToInt32(_trialdata.Variety.Number),
                        CropCodeVariety = _trialdata.Variety.CropCode ?? "",
                        VarietyName = _trialdata.Variety.Name ?? _trialdata.Name,
                        Enumber = _trialdata.Variety.Enumber ?? "",
                        MasterNr = _trialdata.Variety.MasterNumber ?? "",
                        CropSegmentCode = _trialdata.Variety.CropSegmentCode ?? "",
                        ProductSegmentCode = _trialdata.Variety.ProductSegmentCode ?? "",
                        ProductStatus = _trialdata.Variety.ProductStatus ?? "",
                        ResistanceHR = _trialdata.Variety.ResistanceHR ?? "",
                        ResistanceIR = _trialdata.Variety.ResistanceIR ?? "",
                        ResistanceT = _trialdata.Variety.ResistanceT ?? ""

                    };
                    tlList.Add(trialEntriesApp);

                    if (_trialdata.Observations != null)
                    {

                        observationList.AddRange(_trialdata.Observations.ObservationDto.Select(obsData => new ObservationApp
                        {
                            TraitID = Convert.ToInt32(obsData.TraitID),
                            EZID = obsData.EZID.ToString(),
                            UserIDCreated = obsData.UserIDCreated.ToLower(),
                            UserIDUpdated = obsData.UserIDUpdated.ToLower(),
                            DateCreated = obsData.ObservationDate == "" ? "" : Convert.ToDateTime(obsData.ObservationDate).ToString("yyyy-MM-dd"),
                            DateUpdated = obsData.ObservationDate == "" ? "" : Convert.ToDateTime(obsData.ObservationDate).ToString("yyyy-MM-dd"),
                            ObsValueChar = obsData.ValueChar,
                            ObsValueDate = obsData.ValueDate == "" ? (DateTime?)null : Convert.ToDateTime(Convert.ToDateTime(obsData.ValueDate).ToString("yyyy-MM-dd")),
                            ObsValueDec = obsData.ValueDec == "" ? (decimal?)null : Convert.ToDecimal(obsData.ValueDec),
                            ObsValueInt = obsData.ValueInt == "" ? (int?)null : Convert.ToInt32(obsData.ValueInt),
                            ObservationId = obsData.ObservationID == "" ? (int?)null : Convert.ToInt32(obsData.ObservationID)
                        }));
                    }

                    var RelTb = new Relationship
                    {
                        EZID1 = Convert.ToInt32(_trialdata.TrialID),
                        EntityTypeCode1 = "TRI",
                        EZID2 = _trialdata.EZID,
                        EntityTypeCode2 = "TRL"
                    };
                    relationList.Add(RelTb);
                }
            }

            using (var db = new SQLiteConnection(DbPath.GetTransactionDbPath()))
            {

                try
                {
                    db.BeginTransaction();

                    //Create TrialEntry
                    foreach (var _value in tlList)
                    {
                        db.InsertOrReplace(_value);
                    }
                    //Create Relationship
                    foreach (var _value in relationList)
                    {
                        db.InsertOrReplace(_value);
                    }
                    //Create ObservationApp
                    foreach (var _value in observationList)
                    {
                        db.InsertOrReplace(_value);
                    }
                    //Create Trial
                    db.InsertOrReplace(new Trial()
                    {
                        EZID = trial.EZID,
                        CropCode = trial.CropCode,
                        TrialName = trial.TrialName,
                        TrialTypeID = trial.TrialTypeID,
                        CountryCode = trial.CountryCode.ToUpper(),
                        StatusCode = trial.StatusCode
                    });

                    db.Commit();
                    returnValue = true;
                }
                catch (Exception ex)
                {
                    // await Logger.writelog("\n exception occured " + ex.Message);
                    db.Rollback();
                    returnValue = false;
                }
            }


            return returnValue;
        }

        public void UpdateTrialStatus(int _trialEzid)
        {
            repo1.UpdateTrialStatus(_trialEzid);
        }
    }

}
