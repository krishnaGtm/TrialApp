using System;
using System.Collections.Generic;
using System.Windows.Input;
using TrialApp.Common;
using TrialApp.Controls;
using TrialApp.Entities.Transaction;
using TrialApp.Services;
using TrialApp.Views;
using Xamarin.Forms;
using System.Linq;
using System.ComponentModel;
using TrialApp.Entities.Master;

namespace TrialApp.ViewModels
{
    public class ObservationPageViewModel : BaseViewModel
    {
        #region private variables
        //private string _crop;
        //private string _id;
        private Color _headerColor;
        private string _nextVarietyName;
        private Color _buttonColor;
        private List<FieldSetPair> _traitSetList;
        private ObservationAppService _observationService;
        private FieldSetService _FieldSetService;
        //private List<VarietyData> _varList;
        private bool _trialUpdated = false;
        private TrialService _trialService;
        private int _trialEzid;
        private bool _changedVisible;
        private Color _headerTextColor;
        private bool _nextButtonEnable;
        //private List<object> _nextVariety;
        private string _varietyName;
        private string _fieldNumber;
        private string _variety;
        private int _pickerSelectedIndex;
        private List<Trait> traitList;
        private TraitFieldValidation validation;
        private TraitService traitSrv;
        private TraitValueService traitvalSrv;

        #endregion

        #region public properties
        public string _crop { get; set; }
        public string _id { get; set; }
        public int currentVarietyIndex { get; set; }
        public List<VarietyData> VarList { get; set; }

        //public List<object> NextVariety
        //{
        //    get { return _nextVariety; }
        //    set
        //    {
        //        _nextVariety = value;
        //        OnPropertyChanged();
        //    }
        //}

        public bool NextButtonEnable
        {
            get { return _nextButtonEnable; }
            set
            {
                _nextButtonEnable = value;
                OnPropertyChanged();
            }
        }

        public Color HeaderTextColor
        {
            get { return _headerTextColor; }
            set
            {
                _headerTextColor = value;
                OnPropertyChanged();
            }
        }

        public bool ChangedVisible
        {
            get { return _changedVisible; }
            set
            {
                _changedVisible = value;
                OnPropertyChanged();
            }
        }

        public ICommand FieldsetChangeCommand { get; set; }

        public ICommand NextCommand { get; set; }

        public string VarietyName
        {
            get { return _varietyName; }
            set
            {
                _varietyName = value;
                OnPropertyChanged();
            }
        }

        public string FieldNumber
        {
            get { return _fieldNumber; }
            set
            {
                _fieldNumber = value;
                OnPropertyChanged();
            }
        }

        public string Variety
        {
            get { return _variety; }
            set
            {
                _variety = value;
                OnPropertyChanged();
            }
        }

        public Color HeaderColor
        {
            get { return _headerColor; }
            set
            {
                _headerColor = value;
                OnPropertyChanged();
            }
        }

        public Color ButtonColor
        {
            get { return _buttonColor; }
            set
            {
                _buttonColor = value;
                OnPropertyChanged();
            }
        }

        public string NextVarietyName
        {
            get { return _nextVarietyName; }
            set
            {
                _nextVarietyName = value;
                OnPropertyChanged();
            }
        }

        public List<FieldSetPair> TraitSetList
        {
            get { return _traitSetList; }
            set
            {
                _traitSetList = value;
                OnPropertyChanged();
            }
        }

        public int PickerSelectedIndex
        {
            get { return _pickerSelectedIndex; }
            set
            {
                _pickerSelectedIndex = value;
                OnPropertyChanged();
            }
        }

        public List<Trait> TraitList
        {
            get { return traitList; }
            set
            {
                traitList = value;
                OnPropertyChanged();
            }
        }
        public TraitFieldValidation Validation
        {
            get { return validation; }
            set { validation = value; }
        }
        public TraitService TraitSrv
        {
            get { return traitSrv; }
            set
            {
                traitSrv = value;
                OnPropertyChanged();
            }
        }
        public TraitValueService TraitvalSrv
        {
            get { return traitvalSrv; }
            set
            {
                traitvalSrv = value;
                OnPropertyChanged();
            }
        }

        public int? SelectedFieldset { get; set; }

        #endregion

        /// <summary>
        /// 
        /// </summary>
        /// <param name="name"></param>
        /// <param name="id"></param>
        /// <param name="crop"></param>
        /// <param name="varList"></param>
        public ObservationPageViewModel()
        {
            TraitSetList = new List<FieldSetPair>();
            TraitSrv = new TraitService();
            TraitvalSrv = new TraitValueService();
            //NextVariety = new List<object>();

            _FieldSetService = new FieldSetService();
            _trialService = new TrialService();
            _observationService = new ObservationAppService();
            PickerSelectedIndex = 0;

            FieldsetChangeCommand = new FieldsetChangeOperation();
            Validation = new TraitFieldValidation();
            TraitService traitService = new TraitService();
            TraitValueService traitValueService = new TraitValueService();
            //NextCommand = new NextOperation(this);
            NextCommand = new NextOperation();


        }

        public void LoadFieldsset(string crop)
        {
            var firstFieldset = new FieldSetPair() { Id = 0, Name = "<choose traitset>" };
            TraitSetList.Add(firstFieldset);

            var fieldSets = _FieldSetService.GetFieldSetList(crop);

            foreach (var val in fieldSets)
            {
                var fieldset = new FieldSetPair()
                {
                    Id = Convert.ToInt32(val.FieldSetID),
                    Name = val.FieldSetCode + " - " + val.FieldSetName
                };
                TraitSetList.Add(fieldset);
            }
        }

        public void LoadObservationViewModel(string id, string crop, List<VarietyData> varList, int trialEzid)
        {
            _crop = crop;
            _id = id;
            VarList = varList;
            _trialEzid = trialEzid;
            //LoadObservation();
            LoadVarietyInfo(_id);
        }
        /// <summary>
        /// Find next Variety and show it on button content.
        /// </summary>
        //private void LoadObservation()
        public void LoadVarietyInfo(string VarietyId)
        {
            var currentItem = VarList.Find(x => x.VarietyId == VarietyId);
            currentVarietyIndex = VarList.IndexOf(currentItem);
            //VarietyName = string.IsNullOrEmpty(currentItem.VarietyName) ? currentItem.FieldNumber : currentItem.VarietyName;
            VarietyName = currentItem.FieldNumber + " " + currentItem.VarietyName;
            FieldNumber = currentItem.FieldNumber;
            Variety = currentItem.VarietyName;
            // Disable NEXT button if last item in the list is selected
            if (VarList.ElementAtOrDefault(currentVarietyIndex + 1) != null)
            {
                //var nextVarName = string.IsNullOrEmpty(VarList[currentVarietyIndex + 1].VarietyName)
                //    ? VarList[currentVarietyIndex + 1].FieldNumber
                //    : VarList[currentVarietyIndex + 1].VarietyName;
                var nextVarName = VarList[currentVarietyIndex + 1].FieldNumber +" "+ VarList[currentVarietyIndex + 1].VarietyName;
                NextVarietyName = "NEXT: " + nextVarName;
                NextButtonEnable = true;
            }
            else
            {
                NextVarietyName = "NEXT: ";
                NextButtonEnable = false;
            }
            // Change the header and button color according to the status
            var status = _trialService.GetTrialInfo(_trialEzid);
            if (status.StatusCode == 30)
                UpdatedUi();
            else
                NormalUi();
            #region OLDMETHOD
            /*
            NextVariety.Clear();

            var currentItem = _varList.Find(x => x.VarietyId == _id);
            var currentIndex = _varList.IndexOf(currentItem);

            VarietyName = string.IsNullOrEmpty(currentItem.VarietyName) ? currentItem.FieldNumber : currentItem.VarietyName;
            FieldNumber = currentItem.FieldNumber;
            Variety = currentItem.VarietyName;

            // Disable NEXT button if last item in the list is selected
            if (_varList.ElementAtOrDefault(currentIndex + 1) != null)
            {
                var nextVarName = string.IsNullOrEmpty(_varList[currentIndex + 1].VarietyName)
                    ? _varList[currentIndex + 1].FieldNumber
                    : _varList[currentIndex + 1].VarietyName;
                NextVarietyName = "NEXT: " + nextVarName;
                NextButtonEnable = true;

                // parameter for NEXT button
                NextVariety.Add(_varList[currentIndex + 1].VarietyId);
                NextVariety.Add(_crop);
                NextVariety.Add(_varList);
                NextVariety.Add(_trialEzid);
            }
            else
            {
                NextVarietyName = "NEXT: ";
                NextButtonEnable = false;
            }

            // Change the header and button color according to the status
            var status = _trialService.GetTrialInfo(_trialEzid);
            if (status.StatusCode == 30)
                UpdatedUi();
            else
                NormalUi();
            */
            #endregion
        }

        public void LoadTraits(int _fieldsetId)
        {
            var traits = TraitSrv.GetTraitList(_fieldsetId);
            //traitList = traitService.GetTraitList(_fieldsetId);
            TraitList = new List<Trait>(traits.Select(x =>
            {
                var trait = new Trait()
                {
                    ColumnLabel = x.ColumnLabel,
                    CropGroupID = x.CropGroupID,
                    CropCode = x.CropCode,
                    DataType = x.DataType,
                    DisplayFormat = x.DisplayFormat,
                    Editor = x.Editor,
                    ListOfValues = x.ListOfValues,
                    MaxValue = x.MaxValue,
                    MinValue = x.MinValue,
                    Property = x.Property,
                    TraitID = x.TraitID,
                    TraitName = x.TraitName,
                    Updatable = x.Updatable,
                    TraitTypeID = x.TraitTypeID,
                    ListVisible = x.ListOfValues,
                    Tag = x.TraitID.ToString() + "|" + x.DataType,
                    CharVisible = (!x.ListOfValues && string.IsNullOrEmpty(x.DataType)) ? true : (!x.ListOfValues && !string.IsNullOrEmpty(x.DataType) && x.DataType.ToLower() == "c") ? true : false,//datatype c=char, i=int,d=date,a=dec
                    DateVisible = (!x.ListOfValues && string.IsNullOrEmpty(x.DataType)) ? false : (!x.ListOfValues && !string.IsNullOrEmpty(x.DataType) && x.DataType.ToLower() == "d") ? true : false,
                    IntOrDecVisible = (!x.ListOfValues && string.IsNullOrEmpty(x.DataType)) ? false : (!x.ListOfValues && !string.IsNullOrEmpty(x.DataType) && (x.DataType.ToLower() == "i" || x.DataType.ToLower() == "a")) ? true : false,
                    ListSource = x.ListOfValues ? TraitvalSrv.GetTraitValueWithID(x.TraitID) : null,
                    ObsValue = GetObservationValue(GetObsValue(x.TraitID), x.DataType.ToLower()),
                    ValidationErrorVisible = false,
                    ChangedValueVisible = false,
                    DatePickerVisible = false
                };
                trait.ObsValue = (trait.ObsValue == "" && trait.ListVisible) ? null : trait.ObsValue;
                //trait.DateValue = null;
                trait.ObsvalueInitial = trait.ObsValue;
                trait.DateValue = (trait.DateVisible && trait.ObsValue != "") ? Convert.ToDateTime((trait.ObsValue.Split('T')[0])) : (DateTime?)null;


                return trait;
            }).ToList());

            Validation.AddValidation(TraitList.OrderBy(x => x.TraitID).Select(x => x.TraitID.ToString()).ToArray(),
                TraitList.OrderBy(x => x.TraitID).Select(x => x.DisplayFormat).ToArray(),
                TraitList.OrderBy(x => x.TraitID).Select(x => x.MinValue).ToArray(),
                TraitList.OrderBy(x => x.TraitID).Select(x => x.MaxValue).ToArray());
        }

        /// <summary>
        /// Change the UI after value is updated in db
        /// </summary>
        private void UpdatedUi()
        {
            ChangedVisible = true;
            ButtonColor = NextButtonEnable ? Color.Green : Color.FromHex("#ebebeb");
            HeaderColor = Color.Green;
            HeaderTextColor = Color.White;
        }

        /// <summary>
        /// Normal non modified UI page
        /// </summary>
        private void NormalUi()
        {
            HeaderColor = Color.FromHex("#ebebeb");
            ButtonColor = Color.FromHex("#4a90e2");
            ChangedVisible = false;
            HeaderTextColor = Color.Black;
        }

        public async void Entry_Unfocused(object sender, FocusEventArgs e)
        {
            //_trialUpdated
            var entry = sender as Entry;
            //var validate = new TraitFieldValidation();
            var traitId = Convert.ToInt32(entry.ClassId.Split('|')[0]);
            var Trait = TraitList.Where(x => x.TraitID == traitId).FirstOrDefault();
            if (Trait == null)
                return;
            if (Trait.ObsvalueInitial != Trait.ObsValue)
            {
                var dataType = entry.ClassId.Split('|')[1];
                var validateResult = Validation.validatecol(traitId.ToString(), entry.Text);
                if (string.IsNullOrEmpty(validateResult))
                {
                    var observation = new ObservationApp
                    {
                        EZID = _id,
                        TraitID = traitId,
                        DateCreated = DateTime.UtcNow.Date.ToString("yyyy-MM-dd"),
                        DateUpdated = DateTime.UtcNow.Date.ToString("yyyy-MM-dd"),
                        UserIDCreated = "user",
                        UserIDUpdated = "user",
                        Modified = true
                    };
                    observation = ObservationWithCorrVal(observation, dataType.ToLower(), entry.Text);
                    await _observationService.UpdateOrSaveObservationData(observation);
                    _trialService.UpdateTrialStatus(_trialEzid);
                    Trait.ValidationErrorVisible = false;
                    Trait.ChangedValueVisible = true;
                    Trait.ObsvalueInitial = entry.Text;
                }
                else
                {
                    Trait.ValidationErrorVisible = true;
                    Trait.ChangedValueVisible = false;
                    entry.Focus();
                }
            }
        }
        public void DateEntry_Focused(object sender, FocusEventArgs e)
        {
            var entry = sender as Entry;
            var traitId = Convert.ToInt32(entry.ClassId.Split('|')[0]);
            var Trait = TraitList.Where(x => x.TraitID == traitId).FirstOrDefault();
            if (Trait == null)
                return;
            else
            {
                Trait.DatePickerVisible = true;
                Trait.DateVisible = false;
            }
        }
        public async void Today_Clicked(object sender, EventArgs e)
        {            
            var btn = sender as Button;
            var traitId = Convert.ToInt32(btn.ClassId.Split('|')[0]);
            var Trait = TraitList.Where(x => x.TraitID == traitId).FirstOrDefault();
            if (Trait == null)
                return;
            if (Trait.DateValue != DateTime.Today.Date)
            {
                var observation = new ObservationApp
                {
                    EZID = _id,
                    TraitID = traitId,
                    DateCreated = DateTime.UtcNow.Date.ToString("yyyy-MM-dd"),
                    DateUpdated = DateTime.UtcNow.Date.ToString("yyyy-MM-dd"),
                    UserIDCreated = "user",
                    UserIDUpdated = "user",
                    ObsValueDate = DateTime.Today.Date.ToString("yyyy-MM-ddTHH:mm:ss"),// datePicker.Date,
                    Modified = true
                };
                await _observationService.UpdateOrSaveObservationData(observation);
                _trialService.UpdateTrialStatus(_trialEzid);
                Trait.DatePickerVisible = false;
                Trait.DateVisible = true;
                Trait.DateValue = DateTime.Today.Date;
                Trait.ValidationErrorVisible = false;
                Trait.ChangedValueVisible = true;
            }
            


        }
        public void DatePicker_UnFocusedEX(object sender, FocusEventArgs e)
        {
            var datePicker = sender as DatePicker;
            //var validate = new TraitFieldValidation();
            var traitId = Convert.ToInt32(datePicker.ClassId.Split('|')[0]);
            var Trait = TraitList.Where(x => x.TraitID == traitId).FirstOrDefault();
            if (Trait == null)
                return;
            else
            {
                Trait.DatePickerVisible = false;
                Trait.DateVisible = true;
            }

        }
        public async void Picker_SelectedIndexChanged(object sender, EventArgs e)
        {
            var picker = sender as BindablePicker;
            //var validate = new TraitFieldValidation();
            if (picker.ClassId != null)
            {
                var traitId = Convert.ToInt32(picker.ClassId.Split('|')[0]);
                var Trait = TraitList.Where(x => x.TraitID == traitId).FirstOrDefault();
                if (Trait == null)
                    return;
                if (Trait.ObsValue != Trait.ObsvalueInitial)
                {
                    var validateResult = Validation.validatecol(traitId.ToString(), picker.SelectedValue.ToString());
                    if (string.IsNullOrEmpty(validateResult))
                    {
                        var observation = new ObservationApp
                        {
                            EZID = _id,
                            TraitID = traitId,
                            DateCreated = DateTime.UtcNow.Date.ToString("yyyy-MM-dd"),
                            DateUpdated = DateTime.UtcNow.Date.ToString("yyyy-MM-dd"),
                            UserIDCreated = "user",
                            UserIDUpdated = "user",
                            ObsValueChar = picker.SelectedValue.ToString(),
                            Modified = true
                        };
                        await _observationService.UpdateOrSaveObservationData(observation);
                        _trialService.UpdateTrialStatus(_trialEzid);
                        Trait.ValidationErrorVisible = false;
                        Trait.ChangedValueVisible = true;
                    }
                    else
                    {
                        Trait.ValidationErrorVisible = true;
                        Trait.ChangedValueVisible = false;
                    }
                }
            }


        }
        public async void DateData_DateSelected(object sender, DateChangedEventArgs e)
        {
            var datePicker = sender as DatePicker;
            //var validate = new TraitFieldValidation();
            var traitId = Convert.ToInt32(datePicker.ClassId.Split('|')[0]);
            var Trait = TraitList.Where(x => x.TraitID == traitId).FirstOrDefault();
            if (Trait == null)
                return;
            else
            {
                if (Trait.DateValue != DateTime.Today.Date)
                {
                    var observation = new ObservationApp
                    {
                        EZID = _id,
                        TraitID = traitId,
                        DateCreated = DateTime.UtcNow.Date.ToString("yyyy-MM-dd"),
                        DateUpdated = DateTime.UtcNow.Date.ToString("yyyy-MM-dd"),
                        UserIDCreated = "user",
                        UserIDUpdated = "user",
                        ObsValueDate = datePicker.Date.ToString("yyyy-MM-ddTHH:mm:ss"),// datePicker.Date,
                        Modified = true
                    };
                    await _observationService.UpdateOrSaveObservationData(observation);
                    _trialService.UpdateTrialStatus(_trialEzid);
                    Trait.DatePickerVisible = false;
                    Trait.DateVisible = true;
                    Trait.ValidationErrorVisible = false;
                    Trait.ChangedValueVisible = true;
                }
            }

        }

        /// <summary>
        /// returns correct observation value according to the datatype
        /// </summary>
        /// <param name="observationData"></param>
        /// <param name="dataType"></param>
        /// <returns></returns>

        private ObservationApp ObservationWithCorrVal(ObservationApp observation, string dataType, string value)
        {
            switch (dataType)
            {
                case "c":
                    observation.ObsValueChar = value;
                    return observation;
                case "i":
                    int i;
                    observation.ObsValueInt = int.TryParse(value, out i) ? i : (int?)null;// integerval) //Convert.ToInt32(value);
                    return observation;
                case "d":
                    DateTime dt;
                    observation.ObsValueDate = DateTime.TryParse(value, out dt) ? dt.ToString("yyyy-MM-ddTHH:mm:ss") : "";// Convert.ToDateTime(value);
                    return observation;
                case "a":
                    decimal dec;
                    observation.ObsValueDec = decimal.TryParse(value, out dec) ? dec : (decimal?)null;// Convert.ToDecimal(value);
                    return observation;
                default:
                    return observation;

            }
        }

        private string GetObservationValue(ObservationApp observationData, string dataType)
        {
            switch (dataType)
            {
                case "c":
                    return observationData?.ObsValueChar ?? "";
                case "i":
                    return observationData?.ObsValueInt?.ToString() ?? "";
                case "d":
                    return observationData?.ObsValueDate?.ToString()?? "";
                case "a":
                    return observationData?.ObsValueDec?.ToString()?? "";
                default:
                    return "";

            }

        }


        private ObservationApp GetObsValue(int traitId)
        {
            var obsData = _observationService.GetObservationData(_id, traitId);
            return obsData;
        }

    }

    public class NextOperation : ICommand
    {        
        //private readonly ObservationPageViewModel _observationPageViewModel;

        //public NextOperation(ObservationPageViewModel observationPageViewModel)
        public NextOperation()
        {
            //this._observationPageViewModel = observationPageViewModel;
        }

        public bool CanExecute(object parameter)
        {            
            return true;
        }

        public void Execute(object parameter)
        {
            var _observationPageViewModel = parameter as ObservationPageViewModel;
            var nextVar = _observationPageViewModel.VarList[_observationPageViewModel.currentVarietyIndex + 1];
            if (nextVar != null)
            {
                _observationPageViewModel._id = nextVar.VarietyId;
                _observationPageViewModel.LoadVarietyInfo(_observationPageViewModel._id);
                if (_observationPageViewModel.SelectedFieldset.HasValue)
                    _observationPageViewModel.LoadTraits(_observationPageViewModel.SelectedFieldset.Value);
            }
        }

        public event EventHandler CanExecuteChanged;
    }

    public class FieldsetChangeOperation : ICommand
    {
        public bool CanExecute(object parameter)
        {
            return true;
        }

        public void Execute(object parameter)
        {

        }

        public event EventHandler CanExecuteChanged;
    }

    public class FieldSetPair
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class Trait : INotifyPropertyChanged
    {
        public int TraitID { get; set; }
        public int? CropGroupID { get; set; }
        public string CropCode { get; set; }
        public int? TraitTypeID { get; set; }
        public string TraitName { get; set; }
        public string ColumnLabel { get; set; }
        private bool validationErrorVisible;
        public string ObsvalueInitial { get; set; }
        public bool ValidationErrorVisible
        {
            get { return validationErrorVisible; }
            set
            {
                validationErrorVisible = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("ValidationErrorVisible"));
            }
        }
        private bool changedValueVisible;
        public bool ChangedValueVisible
        {
            get { return changedValueVisible; }
            set
            {
                changedValueVisible = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("ChangedValueVisible"));
            }
        }
        private string dataType;
        private bool listVisible;
        public bool ListVisible
        {
            get { return listVisible; }
            set { listVisible = value; }
        }
        private bool charVisible;
        public bool CharVisible
        {
            get { return charVisible; }
            set { charVisible = value; }
        }
        private bool dateVisible;
        private bool datePickerVisible;
        private string dateValueString;
        public string DateValueString
        {
            get { return dateValueString; }
            set
            {
                dateValueString = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("DateValueString"));
            }
        }
        public bool DatePickerVisible
        {
            get { return datePickerVisible; }
            set
            {
                datePickerVisible = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("DatePickerVisible"));
            }
        }
        public bool DateVisible
        {
            get { return dateVisible; }
            set
            {
                dateVisible = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("DateVisible"));
            }
        }
        private DateTime? dateValue;
        public DateTime? DateValue
        {
            get { return dateValue; }
            set
            {
                dateValue = value;
                DateValueString = dateValue?.ToString("yyyy-MM-dd");
                //NotifyPropertyChanged();
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("DateValue"));
            }
        }

        private bool intOrDecVisible;
        public bool IntOrDecVisible
        {
            get { return intOrDecVisible; }
            set { intOrDecVisible = value; }
        }
        public string DataType
        {
            get { return dataType; }
            set { dataType = value; }
        }
        public bool Updatable { get; set; }
        public string DisplayFormat { get; set; }
        public bool Editor { get; set; }
        private bool listOfValues;

        public bool ListOfValues
        {
            get { return listOfValues; }
            set { listOfValues = value; }
        }
        private string tag;
        public string Tag
        {
            get { return tag; }
            set { tag = value; }
        }

        private string obsValue;

        public string ObsValue
        {
            get { return obsValue; }
            set { obsValue = value; }
        }

        public int? MinValue { get; set; }
        public int? MaxValue { get; set; }
        public bool Property { get; set; }

        private List<TraitValue> listSource;

        public event PropertyChangedEventHandler PropertyChanged;
        //private void NotifyPropertyChanged([CallerMemberName]string v = "")
        //{
        //    PropertyChanged(this, new PropertyChangedEventArgs(v));
        //}
        public List<TraitValue> ListSource
        {
            get { return listSource; }
            set
            {
                listSource = value;
                PropertyChanged?.Invoke(this, new PropertyChangedEventArgs("listSource"));
            }
        }

    }
}
