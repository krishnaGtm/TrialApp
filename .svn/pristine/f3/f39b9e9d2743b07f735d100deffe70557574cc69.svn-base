using Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using TrialApp.Common.Extensions;
using TrialApp.Entities.Master;
using TrialApp.Entities.Transaction;
using TrialApp.Services;
using TrialApp.ViewModels.Inetrfaces;

namespace TrialApp.ViewModels
{
    public class FilterPageViewModel : BaseViewModel
    {
        private bool _disableFilter; 
        public ObservableCollection<TrialType> TrialTypeListFromDb { get; set; }
        public ObservableCollection<CropRD> CropListFromDb { get; set; }
        public ObservableCollection<CropSegment> CropSegmentListFromDb { get; set; }
        public ObservableCollection<TrialRegion> TrialRegionListFromDb { get; set; }
        public ObservableCollection<Country> CountryListFromDb { get; set; }
        public List<Entities.Transaction.Trial> TrialList { get; set; }
        public ICommand ApplyFilterCommand { get; set; }

        public ICommand CancelFilterCommand { get; set; }
        private bool _toggleFilter;
        public bool ToggleFilter
        {
            get { return _toggleFilter; }
            set { _toggleFilter = value; OnPropertyChanged(); }
        }
        public bool DisableFilter
        {
            get { return _disableFilter; }
            set { _disableFilter = value; OnPropertyChanged(); }
        }
        
        private readonly CropRdService _cropRdService;
        private readonly CountryService _countryService;
        private readonly TrialTypeService _trialTypeService;
        private readonly TrialRegionService _trialRegionService;
        private readonly SettingParametersService _settingParametersService;
        private readonly CropSegmentService _cropSegmentService;
        public readonly SaveFilterService SaveFilterService;
        public FilterPageViewModel()
        {
            _cropRdService = new CropRdService();
            _countryService = new CountryService();
            _trialTypeService = new TrialTypeService();
            _trialRegionService = new TrialRegionService();
            _settingParametersService = new SettingParametersService();
            _cropSegmentService = new CropSegmentService();
            SaveFilterService = new SaveFilterService();

            ApplyFilterCommand = new ApplyfilterOperation();
            CancelFilterCommand = new CancelOperation();
            var settingparams = _settingParametersService.GetParamsList().Single();
            ToggleFilter = settingparams.Filter;
        }

        public FilterPageViewModel(IDependencyService dependencyService)
        {
            DependencyService = dependencyService;
        }

        #region crop
        private ObservableCollection<MyType> _cropList;

        public ObservableCollection<MyType> CropList
        {
            get { return _cropList; }
            set
            {
                _cropList = value;
                OnPropertyChanged();
            }
        }
        private ObservableCollection<MyType> _cropSelected;

        public ObservableCollection<MyType> CropSelected
        {
            get { return _cropSelected; }
            set
            {
                OnPropertyChanged();
                if (Equals(value, _cropSelected)) return;
                if (_cropSelected != null)
                    _cropSelected.CollectionChanged -= CropItemsCollectionChanged;
                _cropSelected = value;
                if (value != null)
                    _cropSelected.CollectionChanged += CropItemsCollectionChanged;
                //OnPropertyChanged();
            }
        }
        #endregion
        #region TrialType
        private ObservableCollection<MyType> _trialTypeList;

        public ObservableCollection<MyType> TrialTypeList
        {
            get { return _trialTypeList; }
            set
            {
                _trialTypeList = value;
                OnPropertyChanged();
            }
        }
        private ObservableCollection<MyType> _trialTypeSelected;

        public ObservableCollection<MyType> TrialTypeSelected
        {
            get { return _trialTypeSelected; }
            set
            {
                OnPropertyChanged();
                
                if (Equals(value, _trialTypeSelected)) return;
                if (_trialTypeSelected != null)
                    _trialTypeSelected.CollectionChanged -= TrialTypeItemsCollectionChanged;
                _trialTypeSelected = value;
                if (value != null)
                    _trialTypeSelected.CollectionChanged += TrialTypeItemsCollectionChanged;
            }
        }
        #endregion
        #region cropsegment
        private ObservableCollection<MyType> _cropSegmentList;

        public ObservableCollection<MyType> CropSegmentList
        {
            get { return _cropSegmentList; }
            set
            {
                _cropSegmentList = value;
                OnPropertyChanged();
            }
        }
        private ObservableCollection<MyType> _cropSegmentSelected;

        public ObservableCollection<MyType> CropSegmentSelected
        {
            get { return _cropSegmentSelected; }
            set
            {
                OnPropertyChanged();
                if (Equals(value, _cropSegmentSelected)) return;
                if (_cropSegmentSelected != null)
                    _cropSegmentSelected.CollectionChanged -= CropSegmentItemsCollectionChanged;
                _cropSegmentSelected = value;
                if (value != null)
                    _cropSegmentSelected.CollectionChanged += CropSegmentItemsCollectionChanged;

                
            }
        }
        #endregion
        #region trialregion
        private ObservableCollection<MyType> _trialRegionList;
        public ObservableCollection<MyType> TrialRegionList
        {
            get { return _trialRegionList; }
            set
            {
                _trialRegionList = value;
                OnPropertyChanged();
            }
        }
        private ObservableCollection<MyType> _trialRegionSelected;
        public ObservableCollection<MyType> TrialRegionSelected
        {
            get { return _trialRegionSelected; }
            set
            {
                OnPropertyChanged();
                if (Equals(value, _trialRegionSelected)) return;
                if (_trialRegionSelected != null)
                    _trialRegionSelected.CollectionChanged -= TrialRegionItemsCollectionChanged;
                _trialRegionSelected = value;
                if (value != null)
                    _trialRegionSelected.CollectionChanged += TrialRegionItemsCollectionChanged;
                
            }
        }
        #endregion
        #region Country
        private ObservableCollection<MyType> _countrylist;
        public ObservableCollection<MyType> CountryList
        {
            get { return _countrylist; }
            set
            {
                _countrylist = value;
                OnPropertyChanged();
            }
        }
        private ObservableCollection<MyType> _countrySelected;
        public ObservableCollection<MyType> CountrySelected
        {
            get { return _countrySelected; }
            set
            {
                OnPropertyChanged();
                if (Equals(value, _countrySelected)) return;
                if (_countrySelected != null)
                    _countrySelected.CollectionChanged -= CountryItemsCollectionChanged;
                _countrySelected = value;
                if (value != null)
                    _countrySelected.CollectionChanged += CountryItemsCollectionChanged;
                //OnPropertyChanged(nameof(CountrySelected));
                
            }
        }
        #endregion
        
        public void ReloadFilter(string styleId, string selectedValueTrialType, string selectedValueCrop, string selectedValueCropSegment, string selectedValueTrialRegion, string SelectedValueCountry)
        {
            switch(styleId)
            {
                case "TrialType":
                    IndividualFilterItems("Crop", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("Country", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("CropSegment", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("TrialRegion", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    //IndividualFilterItems("TrialType", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    break;
                case "Crop":
                    //IndividualFilterItems("Crop", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("Country", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("CropSegment", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("TrialRegion", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("TrialType", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    break;
                case "CropSegment":
                    IndividualFilterItems("Crop", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("Country", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    //IndividualFilterItems("CropSegment", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("TrialRegion", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("TrialType", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    break;
                case "TrialRegion":
                    IndividualFilterItems("Crop", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("Country", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("CropSegment", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    //IndividualFilterItems("TrialRegion", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("TrialType", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    break;
                case "Country":
                    IndividualFilterItems("Crop", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    //IndividualFilterItems("Country", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("CropSegment", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("TrialRegion", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    IndividualFilterItems("TrialType", selectedValueTrialType, selectedValueCrop, selectedValueCropSegment, selectedValueTrialRegion, SelectedValueCountry);
                    break;
               
            }
        }
        /// <summary>
        /// filter data for individual items based on selection provided
        /// </summary>
        /// <param name="filterFor">Item on which we want to get fitlered list </param>
        /// <param name="selectedValueTrialType">filtered trial type id in comma seperated format</param>
        /// <param name="selectedValueCrop">filtered crop id in comma seperated format</param>
        /// <param name="selectedValueCropSegment">filtered crop segment id in comma seperated format</param>
        /// <param name="selectedValueTrialRegion">filtered trial region id in comma seperated format</param>
        /// <param name="SelectedValueCountry">filtered country id in comma seperated format </param>
        /// <returns></returns>
        private void IndividualFilterItems(string filterFor, string selectedValueTrialType, string selectedValueCrop, string selectedValueCropSegment, string selectedValueTrialRegion, string SelectedValueCountry)
        {
            List<Entities.Transaction.Trial> filteredList = TrialList;
            var filteredData = Enumerable.Empty<string>();
            if (!string.IsNullOrWhiteSpace(selectedValueTrialType) && filterFor!= "TrialType")
            {
                filteredData = selectedValueTrialType.Split(',').Select(x => x.Trim());
                filteredList = filteredList.Where(x => filteredData.Contains(x.TrialTypeID.ToText())).ToList();
            }
            if (!string.IsNullOrWhiteSpace(selectedValueCrop) && filterFor != "Crop")
            {
                filteredData = selectedValueCrop.Split(',').Select(x => x.Trim());
                filteredList = filteredList.Where(x => filteredData.Contains(x.CropCode)).ToList();
            }
            if (!string.IsNullOrWhiteSpace(selectedValueCropSegment) && filterFor != "CropSegment")
            {
                filteredData = selectedValueCropSegment.Split(',').Select(x => x.Trim());
                filteredList = filteredList.Where(x => filteredData.Contains(x.CropSegmentCode)).ToList();
            }
            if (!string.IsNullOrWhiteSpace(selectedValueTrialRegion) && filterFor != "TrialRegion")
            {
                filteredData = selectedValueTrialRegion.Split(',').Select(x => x.Trim());
                filteredList = filteredList.Where(x => filteredData.Contains(x.TrialRegionID.ToText())).ToList();
            }
            if (!string.IsNullOrWhiteSpace(SelectedValueCountry) && filterFor != "Country")
            {
                filteredData = SelectedValueCountry.Split(',').Select(x => x.Trim());
                filteredList = filteredList.Where(x => filteredData.Contains(x.CountryCode)).ToList();
            }

            if(filterFor == "TrialType")
            {
                if (TrialTypeListFromDb == null)
                    return;
                var data = filteredList.Select(x => x.TrialTypeID.ToText());
                TrialTypeList = new ObservableCollection<MyType>(TrialTypeListFromDb.Where(x => data.Contains(x.TrialTypeID.ToText())).Select(x => new MyType
                {
                    Id = x.TrialTypeID.ToText(),
                    Name = x.TrialTypeName
                }).ToList());
                if (!string.IsNullOrWhiteSpace(selectedValueTrialType))
                {
                    filteredData = selectedValueTrialType.Split(',').Select(x => x.Trim());
                    TrialTypeSelected = new ObservableCollection<MyType>(TrialTypeList.Where(x => filteredData.Contains(x.Id)));
                }
                if(TrialTypeSelected == null)
                {
                    TrialTypeSelected = new ObservableCollection<MyType>();
                }
            }
            if (filterFor == "Crop")
            {
                if (CropListFromDb == null)
                    return;
                var data = filteredList.Select(x => x.CropCode);
                CropList = new ObservableCollection<MyType>(CropListFromDb.Where(x => data.Contains(x.CropCode)).Select(x => new MyType
                {
                    Id = x.CropCode,
                    Name = x.CropName
                }).ToList());
                if (!string.IsNullOrWhiteSpace(selectedValueCrop))
                {
                    filteredData = selectedValueCrop.Split(',').Select(x => x.Trim());
                    CropSelected = new ObservableCollection<MyType>(CropList.Where(x => filteredData.Contains(x.Id)));
                }
                if (CropSelected == null)
                {
                    CropSelected = new ObservableCollection<MyType>();
                }

            }
            if (filterFor == "CropSegment")
            {
                if (CropSegmentListFromDb == null)
                    return;
                var data = filteredList.Select(x => x.CropSegmentCode);
                CropSegmentList = new ObservableCollection<MyType>(CropSegmentListFromDb.Where(x => data.Contains(x.CropSegmentCode)).Select(x => new MyType
                {
                    Id = x.CropSegmentCode,
                    Name = x.CropSegmentName
                }).ToList());
                if (!string.IsNullOrWhiteSpace(selectedValueCropSegment))
                {
                    filteredData = selectedValueCropSegment.Split(',').Select(x => x.Trim());
                    //CropSegmentSelected = null;
                    CropSegmentSelected = new ObservableCollection<MyType>(CropSegmentList.Where(x => filteredData.Contains(x.Id)));
                }
                if (CropSegmentSelected == null)
                {
                    CropSegmentSelected = new ObservableCollection<MyType>();
                }
            }
            if (filterFor == "TrialRegion")
            {
                if (TrialRegionListFromDb == null)
                    return;
                var data = filteredList.Select(x => x.TrialRegionID.ToText());
                TrialRegionList = new ObservableCollection<MyType>(TrialRegionListFromDb.Where(x => data.Contains(x.TrialRegionID.ToText())).Select(x => new MyType
                {
                    Id = x.TrialRegionID.ToText(),
                    Name = x.TrialRegionName
                }).ToList());
                if (!string.IsNullOrWhiteSpace(selectedValueTrialRegion))
                {
                    filteredData = selectedValueTrialRegion.Split(',').Select(x => x.Trim());
                    TrialRegionSelected = new ObservableCollection<MyType>(TrialRegionList.Where(x => filteredData.Contains(x.Id)));
                }
                if (TrialRegionSelected == null)
                {
                    TrialRegionSelected = new ObservableCollection<MyType>();
                }
            }
            if (filterFor == "Country")
            {
                if (CountryListFromDb == null)
                    return;
                var data = filteredList.Select(x => x.CountryCode);
                CountryList = new ObservableCollection<MyType>(CountryListFromDb.Where(x => data.Contains(x.CountryCode)).Select(x => new MyType
                {
                    Id = x.CountryCode,
                    Name = x.CountryName
                }).ToList());
                if (!string.IsNullOrWhiteSpace(SelectedValueCountry))
                {
                    filteredData = SelectedValueCountry.Split(',').Select(x => x.Trim());
                    CountrySelected = new ObservableCollection<MyType>(CountryList.Where(x => filteredData.Contains(x.Id)));
                }
                if (CountrySelected == null)
                {
                    CountrySelected = new ObservableCollection<MyType>();
                }
            }
        }
        
        public async Task LoadAllFilterData()
        {
            var savedFilter = await SaveFilterService.GetSaveFilterAsync();
            var downloadedList = string.Join(",", TrialList.Select(x => x.TrialTypeID).Distinct());
            TrialTypeListFromDb = new ObservableCollection<TrialType>(await _trialTypeService.GetTrialTypeListAsync(downloadedList));

            downloadedList = string.Join(",", TrialList.Select(x => "'" + x.CropCode + "'").Distinct());
            CropListFromDb = new ObservableCollection<CropRD>(await _cropRdService.GetCropListAsync(downloadedList));

            downloadedList = string.Join(",", TrialList.Select(x => "'" + x.CropSegmentCode + "'").Distinct());
            CropSegmentListFromDb = new ObservableCollection<CropSegment>(await _cropSegmentService.GetCropSegmentListAsync(downloadedList));

            downloadedList = string.Join(",", TrialList.Select(x => "'" + x.TrialRegionID + "'").Distinct()); ;
            TrialRegionListFromDb = new ObservableCollection<TrialRegion>(await _trialRegionService.GetTrialRegionListAsync(downloadedList));

            downloadedList = string.Join(",", TrialList.Select(x => "'" + x.CountryCode + "'").Distinct());
            CountryListFromDb = new ObservableCollection<Country>(await _countryService.GetCountryListAsync(downloadedList));
            if (savedFilter == null)
            {
                CropList = new ObservableCollection<MyType>(CropListFromDb.Select(x => new MyType
                {
                    Id = x.CropCode,
                    Name = x.CropName
                }).ToList());
                
                CountryList = new ObservableCollection<MyType>(CountryListFromDb.Select(x => new MyType
                {
                    Id = x.CountryCode,
                    Name = x.CountryName
                }).ToList());
               
                TrialTypeList = new ObservableCollection<MyType>(TrialTypeListFromDb.Select(x => new MyType
                {
                    Id = x.TrialTypeID.ToString(),
                    Name = x.TrialTypeName
                }).ToList());
                
                CropSegmentList = new ObservableCollection<MyType>(CropSegmentListFromDb.Select(x => new MyType
                {
                    Id = x.CropSegmentCode,
                    Name = x.CropSegmentName
                }).ToList());
               
                TrialRegionList = new ObservableCollection<MyType>(TrialRegionListFromDb.Select(x => new MyType
                {
                    Id = x.TrialRegionID.ToText(),
                    Name = x.TrialRegionName
                }).ToList());
                
                CountrySelected = new ObservableCollection<MyType>();
                CropSegmentSelected = new ObservableCollection<MyType>();
                TrialRegionSelected = new ObservableCollection<MyType>();
                TrialTypeSelected = new ObservableCollection<MyType>();
                CropSelected = new ObservableCollection<MyType>();
                return;
            }
            var filterFound = false;
            string trialtypefilter = string.Empty;
            string cropfilter = string.Empty;
            string countryfilter = string.Empty;
            string cropsegmentfilter = string.Empty;
            string trialregionfilter = string.Empty;
            string filter = string.Empty;
            var filteredData = Enumerable.Empty<string>();
            foreach (var _data in savedFilter)
            {
                if (filterFound)
                    break;
                if(!string.IsNullOrWhiteSpace(_data.FieldValue))
                    filteredData = _data.FieldValue.Split(',').Select(x => x.Trim());
                switch (_data.Field.ToLower())
                {
                    case "trialtypeid":
                        if(!filterFound && !string.IsNullOrWhiteSpace(_data.FieldValue))
                        {                            
                            filter = "TrialType";
                            filterFound = true;
                            TrialTypeList = new ObservableCollection<MyType>(TrialTypeListFromDb.Select(x => new MyType
                            {
                                Id = x.TrialTypeID.ToString(),
                                Name = x.TrialTypeName
                            }).ToList());
                            TrialTypeSelected = new ObservableCollection<MyType>(TrialTypeList.Where(x => filteredData.Contains(x.Id)));
                            if (TrialTypeSelected.Count <= 0)
                                filterFound = false;

                        }
                        trialtypefilter = _data.FieldValue;
                        break;
                    case "cropcode":
                        if (!filterFound && !string.IsNullOrWhiteSpace(_data.FieldValue))
                        {
                            filter = "Crop";
                            filterFound = true;
                            CropList = new ObservableCollection<MyType>(CropListFromDb.Select(x => new MyType
                            {
                                Id = x.CropCode,
                                Name = x.CropName
                            }).ToList());
                            CropSelected = new ObservableCollection<MyType>(CropList.Where(x => filteredData.Contains(x.Id)));
                            if (CropSelected.Count <= 0)
                                filterFound = false;
                        }
                        cropfilter = _data.FieldValue;
                        break;
                    case "cropsegmentcode":
                        if (!filterFound && !string.IsNullOrWhiteSpace(_data.FieldValue))
                        {
                            filter = "CropSegment";
                            filterFound = true;
                            CropSegmentList = new ObservableCollection<MyType>(CropSegmentListFromDb.Select(x => new MyType
                            {
                                Id = x.CropSegmentCode,
                                Name = x.CropSegmentName
                            }).ToList());
                            CropSegmentSelected = new ObservableCollection<MyType>(CropSegmentList.Where(x => filteredData.Contains(x.Id)));
                            if (CropSegmentSelected.Count <= 0)
                                filterFound = false;
                        }
                        cropsegmentfilter = _data.FieldValue;
                        break;
                    case "trialregionid":
                        if (!filterFound && !string.IsNullOrWhiteSpace(_data.FieldValue))
                        {
                            filter = "TrialRegion";
                            filterFound = true;
                            TrialRegionList = new ObservableCollection<MyType>(TrialRegionListFromDb.Select(x => new MyType
                            {
                                Id = x.TrialRegionID.ToText(),
                                Name = x.TrialRegionName
                            }).ToList());
                            TrialRegionSelected = new ObservableCollection<MyType>(TrialRegionList.Where(x => filteredData.Contains(x.Id)));
                            if(TrialRegionSelected.Count<=0)
                                filterFound = false;
                        }
                        trialregionfilter = _data.FieldValue;
                        break;
                    case "countrycode":
                        if (!filterFound && !string.IsNullOrWhiteSpace(_data.FieldValue))
                        {
                            filter = "Country";
                            filterFound = true;
                            CountryList = new ObservableCollection<MyType>(CountryListFromDb.Select(x => new MyType
                            {
                                Id = x.CountryCode,
                                Name = x.CountryName
                            }).ToList());
                            CountrySelected = new ObservableCollection<MyType>(CountryList.Where(x => filteredData.Contains(x.Id)));
                            if(CountrySelected.Count <=0)
                                filterFound = false;
                        }
                        countryfilter = _data.FieldValue;
                        break;
                }
            }
            if(filterFound)
            {
                ReloadFilter(filter, trialtypefilter, cropfilter, cropsegmentfilter, trialregionfilter, countryfilter);
                return;
            }
            CropList = new ObservableCollection<MyType>(CropListFromDb.Select(x => new MyType
            {
                Id = x.CropCode,
                Name = x.CropName
            }).ToList());

            CountryList = new ObservableCollection<MyType>(CountryListFromDb.Select(x => new MyType
            {
                Id = x.CountryCode,
                Name = x.CountryName
            }).ToList());

            TrialTypeList = new ObservableCollection<MyType>(TrialTypeListFromDb.Select(x => new MyType
            {
                Id = x.TrialTypeID.ToString(),
                Name = x.TrialTypeName
            }).ToList());

            CropSegmentList = new ObservableCollection<MyType>(CropSegmentListFromDb.Select(x => new MyType
            {
                Id = x.CropSegmentCode,
                Name = x.CropSegmentName
            }).ToList());

            TrialRegionList = new ObservableCollection<MyType>(TrialRegionListFromDb.Select(x => new MyType
            {
                Id = x.TrialRegionID.ToText(),
                Name = x.TrialRegionName
            }).ToList());

            CountrySelected = new ObservableCollection<MyType>();
            CropSegmentSelected = new ObservableCollection<MyType>();
            TrialRegionSelected = new ObservableCollection<MyType>();
            TrialTypeSelected = new ObservableCollection<MyType>();
            CropSelected = new ObservableCollection<MyType>();
            return;
            
        }

        private void CountryItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            OnPropertyChanged(nameof(CountrySelected));
        }
        private void CropItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            OnPropertyChanged(nameof(CropSelected));
            //OnPropertyChanged();
        }
        private void TrialRegionItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            OnPropertyChanged(nameof(TrialRegionSelected));
            //OnPropertyChanged();
        }
        private void CropSegmentItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            OnPropertyChanged(nameof(CropSegmentSelected));
            //OnPropertyChanged();
        }
        private void TrialTypeItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            OnPropertyChanged(nameof(TrialTypeSelected));
        }
        public void ToggleFilterSetting(string isToggled)
        {
            _settingParametersService.UpdateParams("filter", isToggled);
        }
    }
    internal class ApplyfilterOperation : ICommand
    {
        public bool CanExecute(object parameter)
        {
            return true;
        }

        public async void Execute(object parameter)
        {
            var vm = parameter as FilterPageViewModel;
            if (vm == null) return;

            var savefilterList = new List<SaveFilter>
            {
                new SaveFilter() {Field = "TrialTypeId", FieldValue = string.Join(",", vm.TrialTypeSelected.Select(m => m.Id))},
                new SaveFilter() {Field = "CropCode", FieldValue = string.Join(",", vm.CropSelected.Select(m => m.Id))},
                new SaveFilter() {Field = "CropSegmentCode", FieldValue = string.Join(",", vm.CropSegmentSelected.Select(m => m.Id))},
                new SaveFilter() {Field = "TrialRegionId", FieldValue = string.Join(",", vm.TrialRegionSelected.Select(m => m.Id))},
                new SaveFilter() {Field = "CountryCode", FieldValue = string.Join(",", vm.CountrySelected.Select(m => m.Id)) }
            };
            await vm.SaveFilterService.SaveFilterAsync(savefilterList);
            await App.MainNavigation.PopAsync();
        }

        public event EventHandler CanExecuteChanged;
    }
}
